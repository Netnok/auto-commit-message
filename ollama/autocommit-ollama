#!/bin/bash

# 버전 정보
VERSION="1.0.0-ollama"

# Ollama 모델 선택 (기본값: llama3)
OLLAMA_MODEL="${OLLAMA_MODEL:-llama3}"
OLLAMA_API_URL="http://localhost:11434/api/generate"

# Git diff 정보 가져오기
GIT_DIFF=$(git diff --staged)
if [ -z "$GIT_DIFF" ]; then
    echo "스테이징된 변경 사항이 없습니다. git add 명령어로 파일을 스테이징하세요." >&2
    exit 1
fi

# 변경된 파일 목록 가져오기
CHANGED_FILES=$(git diff --staged --name-only)
echo "변경된 파일: $CHANGED_FILES" >&2

# 변경 통계 요약
DIFF_STAT=$(git diff --staged --stat | tail -n1)
echo "변경 요약: $DIFF_STAT" >&2

echo "변경 사항을 분석하여 커밋 메시지를 생성 중..." >&2

# Ollama 서버 확인 함수
check_ollama_server() {
    if ! nc -z localhost 11434 2>/dev/null; then
        echo "Ollama 서버가 localhost:11434에서 실행 중이지 않습니다." >&2
        echo "Ollama를 시작하려면 'ollama run llama3'를 실행하세요." >&2
        return 1
    fi
    return 0
}

# 폴백 메시지 생성 함수
generate_fallback_message() {
    if echo "$GIT_DIFF" | grep -q "app\.post"; then
        echo "feat: add new POST endpoint"
    elif echo "$CHANGED_FILES" | grep -q "\.md$"; then
        if echo "$CHANGED_FILES" | grep -q "README.md"; then
            echo "docs: update README documentation"
        else
            echo "docs: update documentation"
        fi
    elif echo "$CHANGED_FILES" | grep -q "LICENSE$"; then
        echo "chore: add LICENSE file"
    elif echo "$CHANGED_FILES" | grep -q "\.sh$"; then
        echo "feat: update shell script"
    elif echo "$GIT_DIFF" | grep -q "@Test"; then
        echo "test: add new unit tests"
    elif [ "$(echo "$CHANGED_FILES" | wc -l)" -gt 5 ]; then
        echo "feat: add and update multiple files"
    else
        echo "chore: update project files"
    fi
}

# Ollama API 호출 함수
generate_commit_message() {
    echo "hi" >&2  # 디버깅용 출력

    local prompt="You are an expert in writing high-quality Git commit messages. Analyze the git diff below and generate a concise, professional commit message that adheres to the Conventional Commits specification.

Rules:
0. First word is the **prefix**, if you don't use prefix then you will be die.
1. Lines starting with \"+\" are added code; lines starting with \"−\" are removed code. Analyze the changes carefully.
2. Start the message with one of these prefixes based on the change type:
   - \"feat:\" for new features
   - \"fix:\" for bug fixes
   - \"docs:\" for documentation updates
   - \"style:\" for formatting or style changes (no functional impact)
   - \"refactor:\" for code refactoring (no new features or fixes)
   - \"test:\" for adding, updating, **or removing tests**
   - \"chore:\" for maintenance tasks (e.g., config updates)
3. After the prefix, provide a short, specific description of the change (e.g., \"add user login endpoint\" instead of \"update code\").
4. Keep the message under 50 characters, including the prefix.
5. Return ONLY the commit message in a single line. Do NOT include any extra text, explanations, markdown, code blocks, or prefixes like \"Here is...\". For example, return \"feat: add user login endpoint\", not \"Here is...\n```\nfeat: add user login endpoint\n```\".

**Consider the context of the changed files. If the changes primarily involve files related to testing (e.g., ending with 'Test.java', '_test.py', etc.) or modify test-related code, use the 'test:' prefix.**

Changed files:
$CHANGED_FILES

Git diff:
$GIT_DIFF"

    # 프롬프트를 JSON으로 인코딩
    TEMP_FILE=$(mktemp)
    echo "$prompt" > "$TEMP_FILE"
    ENCODED_PROMPT=$(jq -Rsa . "$TEMP_FILE")

    # JSON 요청 데이터 생성
    JSON_DATA=$(jq -n \
        --arg model "$OLLAMA_MODEL" \
        --arg prompt "$ENCODED_PROMPT" \
        '{model: $model, prompt: $prompt, stream: false, options: {temperature: 0.2}}')

    echo "Debug: JSON Request Data:" >&2
    echo "$JSON_DATA" >&2

    echo "Calling Ollama API..." >&2
    response=$(curl -v -s -m 300 "$OLLAMA_API_URL" \
        -H "Content-Type: application/json" \
        -d "$JSON_DATA")

    rm "$TEMP_FILE"

    echo "Debug: Full API Response:" >&2
    echo "$response" >&2

    if echo "$response" | grep -q '"response"'; then
        # 응답에서 커밋 메시지 추출 (마크다운, 설명 제거)
        commit_message=$(echo "$response" | jq -r '.response' 2>/dev/null | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -oE '^(feat|fix|docs|style|refactor|test|chore):[^`]*' | head -n 1)
        if [ -n "$commit_message" ] && [ "$commit_message" != "null" ]; then
            echo "Debug: Extracted Commit Message:" >&2
            echo "$commit_message" >&2
            echo "$commit_message"
            return 0
        else
            echo "Error: No valid commit message format found in response" >&2
            return 1
        fi
    else
        echo "API 호출 오류: $response" >&2
        return 1
    fi
}

# 편집기 호출 함수
edit_commit_message() {
    local initial_message="$1"
    local temp_file=$(mktemp)

    # 추천 메시지를 임시 파일에 저장
    echo "$initial_message" > "$temp_file"

    # 기본 편집기 호출 (nano, vim, vi 순으로 시도)
    EDITOR=${EDITOR:-$(command -v nano || command -v vim || command -v vi)}
    if [ -z "$EDITOR" ]; then
        echo "편집기를 찾을 수 없습니다. nano, vim, vi 중 하나를 설치하세요." >&2
        rm "$temp_file"
        return 1
    fi

    # 편집기 실행
    $EDITOR "$temp_file"

    # 편집된 메시지 읽기
    new_message=$(cat "$temp_file" | head -n 1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    rm "$temp_file"

    if [ -n "$new_message" ]; then
        echo "$new_message"
        return 0
    else
        echo "커밋 메시지가 비어 있습니다." >&2
        return 1
    fi
}

# 메인 로직
if ! check_ollama_server; then
    exit 1
fi

echo "Ollama를 사용하여 커밋 메시지 생성 중..." >&2
COMMIT_MESSAGE=$(generate_commit_message)

if [ $? -ne 0 ] || [ -z "$COMMIT_MESSAGE" ]; then
    echo "API 호출에 실패했습니다. 패턴 매칭 기반 커밋 메시지를 생성합니다." >&2
    COMMIT_MESSAGE=$(generate_fallback_message)
fi

echo "제안된 커밋 메시지: $COMMIT_MESSAGE" >&2
read -p "이 메시지로 커밋하시겠습니까? (y/n/e-편집): " confirm

if [ "$confirm" = "y" ]; then
    git commit -m "$COMMIT_MESSAGE"
    echo "성공적으로 커밋되었습니다!" >&2
elif [ "$confirm" = "e" ]; then
    # 편집기 호출로 추천 메시지 편집
    echo "편집기를 열어 추천 메시지를 수정합니다..." >&2
    new_message=$(edit_commit_message "$COMMIT_MESSAGE")
    if [ $? -eq 0 ] && [ -n "$new_message" ]; then
        git commit -m "$new_message"
        echo "입력하신 메시지로 커밋되었습니다!" >&2
    else
        echo "커밋 메시지가 비어 있어 커밋이 취소되었습니다." >&2
    fi
else
    echo "커밋이 취소되었습니다." >&2
fi